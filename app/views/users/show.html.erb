<% provide(:title, @user.name) %>

<div class="row">
  <div class="card user_header span9">
    <canvas id="canvas"></canvas>    
    <section class="user_business_card span6">
      <div class="clearfix">
        <div class="photo">
          <%=avatar_for(@user, 100)%>
        </div>
        <h3>
        <%= @user.name %>
        </h3>
      </div>
      <hr />
      <div class="story_count"><div class="btn-round btn-black btn-round-small pull-left"><%=@user.stories.count%></div>Stories</div>
      <div class="recent_activity"><small>Most recent activity<br/><cite><%=raw @user.microposts.first(order: "id DESC").try(:content)%></cite></small></div>
      <div class="sash span3">
      <%= render partial: 'sash', locals: { badges: @user.badges } %>
      </div>
    </section> 
  </div>
    <% if (current_user == @user) %>
    <div class="span9 card">
    <section>
        <%= render partial: "/microposts/form", locals: { micropost: @user.microposts.build } %>
    </section>
    </div>
    <% end %>
  
  
    <% if @user.stories.any? %>
    <div class="card span9">
      <h3>Stories</h3>
    </div>
      <ul class="thumbnails">
        <% @user.stories.each do |story| %>
          <%= render partial: "/stories/story", locals: { story: story, hideAuthor: true } %>
        <%end%>
      </ul>
      
    <% end %>
  
  
    <% if @user.microposts.any? %>
    <div class="span9">
      <h3>Activity</h3>
    </div>
      <ol class="microposts">
        <%= render @microposts %>
      </ol>
      <%= will_paginate @microposts %>
    <% end %>
</div>
<script>
  
    var canvas = document.getElementById("canvas");
    var ctx = canvas.getContext("2d");
    //CORS workaround    
    var img = new Image();
    img.onload = function () {
      //draw it big
      var ratio = img.width / img.height;
      var bounds = $(canvas).parent(0)[0].getBoundingClientRect();
      canvas.width = bounds.width*1.2;
      canvas.height = canvas.width / ratio;
      ctx.drawImage(img, -100, -100, canvas.width, canvas.height);
      
      Pixastic.process(canvas, "crop", {
         rect: { left: 0, top: 0, width: bounds.width, height: bounds.height },
         'leaveDOM': true,
       }, function(result) {
        canvas.width = bounds.width;
        canvas.height = bounds.height;
        ctx.drawImage(result,0,0);
        tiltShift(canvas);
      });
    }

    function tiltShift(c)
    {
      //start out by adding some pop
      var ctx = c.getContext("2d");
      Pixastic.process(canvas, "hsl", {hue:0,saturation:60,lightness:0, 'leaveDOM': true}, function(result) { ctx.drawImage(result,0,0);
        Pixastic.process(canvas, "brightness", {brightness:10,contrast:0.4, 'leaveDOM': true}, function(result) { ctx.drawImage(result,0,0);
          //make a copy of the canvas
          var blurCanvas = document.createElement("canvas");
          blurCanvas.width=c.width;
          blurCanvas.height=c.height;
          var blurCtx = blurCanvas.getContext("2d");
          //blur the image to the new canvas
          Pixastic.process(c,"blurfast",{amount:5, 'leaveDOM': true},  function(result) { blurCtx.drawImage(result,0,0);
            
          var w = blurCanvas.width, h = blurCanvas.height;
          // pull the entire image into an array of pixel data
          var sharpData = ctx.getImageData(0, 0, w, h);
          var blurData = blurCtx.getImageData(0, 0, w, h);
          //compose a new image from the two
          for(var i=0;i<sharpData.data.length;i+=4)
          {
              sharpPixel = new Array(sharpData.data[i],sharpData.data[i+1],sharpData.data[i+2],sharpData.data[i+3]);
              blurPixel = new Array(blurData.data[i],blurData.data[i+1],blurData.data[i+2],blurData.data[i+3]);
              weight = getBlurWeight(i,w,h);//,luminance(blurPixel), luminance(sharpPixel));
              for(var j=0;j<4;j++)
                sharpData.data[i+j] = (blurPixel[j]*(weight)+(sharpPixel[j]*(1-weight)));
          }
          //slap it back on the original canvas
          ctx.putImageData(sharpData,0,0);
          });
        }); 
      });
    }
    //CORS workaround
    img.crossOrigin = "Anonymous";
    img.src = '<%=random_story_banner(@user)%>';
  //   $(document).ready(function(){
  //     $("#canvas").animate({ 
  //       marginLeft: "+=10px",
  //   }, 1000 )
  // });
function getBlurWeight(i,w,h,u,v)
{
  var y = Math.floor(i / 4 / w);
  diff = Math.abs(h/2 - y);
  var factor = diff/(h/2.0);
  factor = 1/(1+Math.exp(-15*(factor-0.5))) //on a curve
  //factor = factor * (1 + v - u);
  return factor;
}

function luminance(pixel)
{
  return (0.299*pixel[0] + 0.587*pixel[1] + 0.114*pixel[2]) / 255;
}
 
</script>